{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww19480\viewh14800\viewkind0
\deftab720
\pard\pardeftab720\qj\partightenfactor0

\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
Answer to how will we cancel a booking or reservation logic?\
\
\
In addressing the scenario of a user cancelling a reservation, our solution will be tailored to focus solely on the ticket reservations associated with a specific movie session. The modified logic will entail identifying the specific movie ticket reservation using both the user's unique identifier and the movie session ID. Once identified, the system will update the session's available ticket count, incrementing it based on the number of tickets the user had reserved. This ensures that when a reservation is canceled, the available tickets for the movie session are accurately updated. The user's ticket reservation is then deleted from the 'movieticket' database. Throughout this process, the user's account and their associated reviews remain untouched. To future-proof this solution, we'd implement clear input validation and error-handling mechanisms, ensuring that only valid ticket cancellations are processed. Additionally, the system could be enhanced to notify the user with confirmation messages or emails post-cancellation, providing a seamless user experience.\
\
\
Install npm install to install the modules respectively.\
\
To run tests- npm test\
\
Run the frontend (FE):\
-go the frontend directory first\
-npm start\
\
Run the backend(be)\
Go to the backend directory\
-node server.js}